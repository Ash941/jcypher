constraints on trevaersal results in select expressions may only be expressed on direct traversals from the expressions source set
-> do a validation

problem with unconstraint optional matches

test for contains and count if direct traversals

---done--- check traversal query "BACK_02" for optimization on IN clause

---done--- DomainObjectMatch.COUNT() for predicates in collection expressions

check TODOs in QueryExecutor

---done--- QueryExecutor-StepClause -> refactor code for stepForward and stepBackward (avoid redundancies)

how to handle multiple hops with surrogate classes

traversal of maps

optimization: reduce return statements

---done--- inner class surrogates - handle relations

add domain name as node label

---done--- optimize domain query pagination, remove match clauses if no dependencies exits

optimize pagination query for Domain Mapping (see Domain Queries)

lists arrays maps as root objects

remove surrogate objects from result

---done--- support inner classes

START.node(n).byId(ids...) now works, some queries can be made simpler now

---done--- docu: domain objects must have default constructor

avoid stack overflow on mixed (simple / complex) lists (they are not supported)

optimization: dynamic max query length

---done--- mapping of java arrays

---done--- guarantee uniqueness of node labels

---done--- don't place objects which have only simple attributes to the set of reload-deep objects (optimization) 

reuse MapEntry nodes ?

optimize query building for MapEntry (- classFieldName)

---done--- relationKey for MapEntry must be unique for map
		--> not required as the KeyedRelation is unique based on sourceField and MapEntry

---done--- handle ambiguous types in MapEntry - optimize query building

---done--- remove MapEntry Objects and their relations

---done--- don't map transient attributes

---done--- relations in case of collections must be multiple

ambiguous with null values -- revisit

handle Date subclasses

---done--- map lists of lists, maps of maps, maps of lists, lists of maps

---done--- delete property when updating from empty to nonempty list needing relation

Test in future versions:
// currently if you use parameters in a cypher query, and a parameter is a list,
	// this does not work properly. Instead of storing a list as property value,
	// everything is converted to a string.
	// The workaround is not to use paramaters with cypher queries and lists.
	// This is true for NEO4J Versions at least up to 2.1.4
	// If this is corrected in NEO4J some time to come, you simply in class CypherWriter
	// can set CORRECT_FOR_LIST_WITH_PARAMS to false and the workaround
	// will be removed

add unit test for SEPARATE clause

reentrancy, multithreading, concurrency on db !!

---done--- fill relationToIdMap from load !!

---done--- Recursions in buildClosureQuery ?!

Problem: DISTINCT with Multiple RETURNs

---done--- Consolidate Util classes

---done--- reuse ExecutionEngine

---done--- query parameters in embedded db

---done--- CREATE_UNIQUE pattern not supported -- check this --> it is ok

---done--- params or parameters depending on REST endpoint 'cypher' or 'transaction' how to handle ?? (configurable ??)

---done--- fix: "query":"START n = node:Persons(\"name:A\")" --> this is correct in JSON !!!

---done--- Mathematical functions.

---done--- TOINT, TOFLOAT

IMultiple: JcPath, JcNode and JcRelation are possibly collections (should be usable as collections)

---done---in javadoc exchange 'match' with 'match or create (depends on the clause)' or ''blank

---done--- COALESCE

MATCH:
Relationship types with uncommon characters

---done--- OPTIONAL MATCH

---done--- Aggregation

---done--- Factory Class R needed? --> no, removed

---done--- create, drop index

---done--- Scalar functions

---done--- function length(path)

substringFrom(start) instead of substring(start)

---done--- Number operators % , ^

---done--- concat: <-> in quotes? do check !!!

---done--- test function LABELS + JcNode.label(...)

---done---map PredicateExpression to CollectExpression ausführlich testen !!!

JcValue als Variable in z.B. forAll(x) dort darf nur x aber kein Ausdruck stehen (wie stell ich das sicher !?)

---done---ClauseType gehört in ASTNode, ClausePart wird obsolet

---done--- Verwendung von P kontrollieren --> (wird in return expressions benötigt)

RETURN element: runtime: das erste in der ValueElement Kette verwenden oder exception werfen !?
		-->

ValueElement ist einziger Parent von JcValue

---done--- collect() zu returns, weg von collections ?! --> NEIN

---done---holdsTrue einfacher z.B. holdsTrue().forAll(n) ? Nein scheint OK so !!

---done---check need for factory ST -> remove ST